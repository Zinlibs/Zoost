////////////////////////////////////////////////////////////
//
// Zoost C++ library
// Copyright (C) 2011-2012 ZinLibs (zinlibs@gmail.com)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////

#ifndef ZOOST_TRANSFORMABLE_HPP
#define ZOOST_TRANSFORMABLE_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <vector>
#include <map>
#include <Zoost/Vector2.hpp>
#include <Zoost/Transform.hpp>
#include <Zoost/Rect.hpp>
#include <Zoost/Segment.hpp>
#include <Zoost/Config.hpp>

namespace zin
{

class ZOOST_API Transformable
{
public:

    ////////////////////////////////////////////////////////////
    // Default constructor
    ////////////////////////////////////////////////////////////
    Transformable(const Vector2d& position = Vector2d(0, 0), double rotation = 0, const Vector2d& scale = Vector2d(1, 1));

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    Transformable& operator=(const Transformable& transformable);

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void init();

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setPositionX(double posX);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setPositionY(double posY);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setPosition(double posX, double posY);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setPosition(const Vector2d& pos);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void moveX(double shiftX);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void moveY(double shiftY);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void move(double shiftX, double shiftY);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void move(const Vector2d& shift);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    double getPositionX();

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    double getPositionY();

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    Point getPosition();
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setRotation(double angle);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void rotate(double angle);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    double getRotation();
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setScaleX(double coeffX);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setScaleY(double coeffY);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setScale(double coeffX, double coeffY);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setScale(const Vector2d& coeff);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void scaleX(double coeffX);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void scaleY(double coeffY);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void scale(double coeffX, double coeffY);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void scale(const Vector2d& coeff);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    Vector2d getScale();
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setOrigin(double x, double y);

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    void setOrigin(const Vector2d& origin);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    const Vector2d& getOrigin() const;

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////    
    Transform& getTransform() const;

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    Transform& getInvTransform() const;
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    Point convertToLocal(const Point& point) const;
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    Point convertToLocal(const double pointX, const double pointY) const;

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    Segment convertToLocal(const Segment& segment) const;
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    Point convertToGlobal(const Point& point) const;

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    Point convertToGlobal(const double pointX, const double pointY) const;

    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
    Segment convertToGlobal(const Segment& segment) const;

protected:

    ////////////////////////////////////////////////////////////
    // Data members
    ////////////////////////////////////////////////////////////    
    mutable bool      m_transformUpdated,
                      m_invTransformUpdated;
    mutable Transform m_transform,
                      m_invTransform;
    Point             m_origin;
    Point             m_position;
    Vector2d          m_scale;
    double            m_rotation;
};

}

#endif // ZOOST_TRANSFORMABLE_HPP