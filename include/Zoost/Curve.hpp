////////////////////////////////////////////////////////////
//
// Zoost C++ library
// Copyright (C) 2011-2012 Pierre-Emmanuel BRIAN (zinlibs@gmail.com))
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////

#ifndef ZOOST_CURVE_HPP
#define ZOOST_CURVE_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Zoost/Geom.hpp>
#include <Zoost/Vector2.hpp>
#include <Zoost/Config.hpp>
#include <initializer_list>

namespace zin
{

class ZOOST_API Curve : public Geom
{
public:

    ////////////////////////////////////////////////////////////
    // Default constructor
    ////////////////////////////////////////////////////////////
    Curve() {}

    ////////////////////////////////////////////////////////////
    // Copy constructor
    ////////////////////////////////////////////////////////////
    Curve(const Curve& curve);

    ////////////////////////////////////////////////////////////
    // Constructor
    ////////////////////////////////////////////////////////////
    Curve(const std::initializer_list<Point>& points);

    ////////////////////////////////////////////////////////////
    // Return the result of the given curve plus the current one
    ////////////////////////////////////////////////////////////
    Curve& add(const Curve& curve);

    ////////////////////////////////////////////////////////////
    // Curve geometry from another curve
    ////////////////////////////////////////////////////////////
    Curve operator+(const Curve& curve);
    
    ////////////////////////////////////////////////////////////
    // Add curve from another curve
    ////////////////////////////////////////////////////////////
    Curve& operator+=(const Curve& curve);
    
    ////////////////////////////////////////////////////////////
    // Replace the current curve by the given one
    ////////////////////////////////////////////////////////////
    Curve& operator=(const Curve& curve);

    ////////////////////////////////////////////////////////////
    // Get the length
    ////////////////////////////////////////////////////////////
    double getLength() const;

    ////////////////////////////////////////////////////////////
    // Interpolate a value
    ////////////////////////////////////////////////////////////
    Coords operator[](double factor) const;
    
    ////////////////////////////////////////////////////////////
    // Add a vertex
    ////////////////////////////////////////////////////////////
    Vertex& addVertex(const Point& point);

    ////////////////////////////////////////////////////////////
    // Create a bezier curve
    ////////////////////////////////////////////////////////////
    static Curve bezier(const std::initializer_list<Point>& keyPoints, Uint32 complexity = 50);
    
private:    

    using Geom::addLiaison;
    using Geom::addFace;
    using Geom::contains;

    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    double m_length = 0;
};

}

#endif // ZOOST_CURVE_HPP
